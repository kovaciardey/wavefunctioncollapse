using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEngine;

/**
 * This class is used to save the data generated by the input processor to a JSON file.
 * It uses an intermediary class to translate the objects from a WfcGenerationData instance into a serializable manner
 */
public class WaveFunctionDataSaver
{
    /**
     * Intermediate class for the WfcGenerationData instance to be properly serialized
     */
    [System.Serializable]
    private class WfcDataWrapper
    {
        public int totalPixels;
        public List<TileEntry> tileMap = new List<TileEntry>();
        public List<TileCount> tileCounts = new List<TileCount>();
        public List<TileWeight> tileWeights = new List<TileWeight>();
        
        // TODO: perhaps make all these a single TileData class as they all have the same key 
        [System.Serializable]
        public class TileEntry
        {
            public string tileUniqueString;
            public string colorValue;
        }
        
        [System.Serializable]
        public class TileCount
        {
            public string tileUniqueString;
            public int occurrences;
        }
        
        [System.Serializable]
        public class TileWeight
        {
            public string tileUniqueString;
            public float weight;
        }

        public WfcDataWrapper(WfcGenerationData data)
        {
            totalPixels = data.TotalPixels;
            
            foreach (KeyValuePair<string, Color> kvp in data.TileMap)
            {
                tileMap.Add(new TileEntry
                {
                    tileUniqueString = kvp.Key, 
                    colorValue = CustomUtils.ColorToHex(kvp.Value)
                });
            }

            foreach (KeyValuePair<string, int> kvp in data.TileCounts)
            {
                tileCounts.Add(new TileCount
                {
                    tileUniqueString = kvp.Key,
                    occurrences = kvp.Value
                });
            }

            foreach (KeyValuePair<string, float> kvp in data.TileWeights)
            {
                tileWeights.Add(new TileWeight
                {
                    tileUniqueString = kvp.Key,
                    weight = kvp.Value
                });   
            }
        }
    }
    
    /**
     * Save the serialized WfcGenerationData to a JSON file named the same as the input image
     */
    public static void SaveToJson(WfcGenerationData data, string fileName)
    {
        string json = JsonUtility.ToJson(new WfcDataWrapper(data), true); // Pretty print

        string path = Path.Combine(Application.dataPath, "Resources", fileName + ".json");

        File.WriteAllText(path, json);
        Debug.Log("Saved JSON to: " + path);
    }
    
    /**
     * Load a JSON file and create nad return a WfcGenerationData instance
     */
    // TODO: this is just here for later. it is not being used at the moment
    public static WfcGenerationData LoadFromJson(string fileName)
    {
        TextAsset jsonFile = Resources.Load<TextAsset>(fileName);
        if (jsonFile == null)
        {
            Debug.LogError("File not found: " + fileName);
            return null;
        }
        
        // TODO: Would be good to have a separate function for translating each object back into the appropriate WfcDataGeneration object
        WfcDataWrapper wrapper = JsonUtility.FromJson<WfcDataWrapper>(jsonFile.text);
        var data = new WfcGenerationData
        {
            TotalPixels = wrapper.totalPixels,
            TileMap = new Dictionary<string, Color>()
        };

        foreach (var entry in wrapper.tileMap)
        {
            // TODO: call the utils function to convert the hex string back into a color class
            // data.TileMap[entry.tileUniqueString] = entry.colorValue;
        }

        return data;
    }
}